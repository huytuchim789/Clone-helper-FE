{"ast":null,"code":"var _jsxFileName = \"D:\\\\stackoverflow-clone\\\\client\\\\pages\\\\users\\\\[username].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport UserCard from '../../components/user-card';\nimport AvatarCard from '../../components/user-card/avatar-card';\nimport PostList from '../../components/user-card/post-list';\nimport PostItem from '../../components/user-card/post-list/post-item';\nimport { Spinner } from '../../components/icons';\nconst UserDetail = ({\n  username\n}) => {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(null);\n  const {\n    0: postType,\n    1: setPostType\n  } = useState('Questions');\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/question/user/${username}`);\n      setPosts(data);\n    };\n    fetchQuestions();\n  }, [postType, username]);\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"Users \", username, \" - CodingHepler\")), __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(AvatarCard, {\n    username: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(PostList, {\n    postType: postType,\n    setPostType: setPostType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, !posts && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  })), posts === null || posts === void 0 ? void 0 : posts.map(({\n    id,\n    title,\n    score,\n    created\n  }) => __jsx(PostItem, {\n    key: id,\n    title: title,\n    vote: score,\n    created: created,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })), (posts === null || posts === void 0 ? void 0 : posts.length) == 0 && __jsx(\"p\", {\n    className: \"not-found-questions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Don't have any questions yet.\"))));\n};\nexport async function getServerSideProps(context) {\n  const username = context.params.username;\n  return {\n    props: {\n      username\n    }\n  };\n}\nexport default UserDetail;","map":{"version":3,"names":["React","useEffect","useState","Head","publicFetch","Layout","UserCard","AvatarCard","PostList","PostItem","Spinner","UserDetail","username","posts","setPosts","postType","setPostType","fetchQuestions","data","get","map","id","title","score","created","length","getServerSideProps","context","params","props"],"sources":["D:/stackoverflow-clone/client/pages/users/[username].js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Head from 'next/head'\r\n\r\nimport { publicFetch } from '../../util/fetcher'\r\n\r\nimport Layout from '../../components/layout'\r\nimport UserCard from '../../components/user-card'\r\nimport AvatarCard from '../../components/user-card/avatar-card'\r\nimport PostList from '../../components/user-card/post-list'\r\nimport PostItem from '../../components/user-card/post-list/post-item'\r\nimport { Spinner } from '../../components/icons'\r\n\r\nconst UserDetail = ({ username }) => {\r\n  const [posts, setPosts] = useState(null)\r\n  const [postType, setPostType] = useState('Questions')\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      const { data } = await publicFetch.get(`/question/user/${username}`)\r\n      setPosts(data)\r\n    }\r\n    fetchQuestions()\r\n  }, [postType, username])\r\n\r\n  return (\r\n    <Layout extra={false}>\r\n      <Head>\r\n        <title>Users {username} - CodingHepler</title>\r\n      </Head>\r\n\r\n      <UserCard>\r\n        <AvatarCard username={username} />\r\n        <PostList postType={postType} setPostType={setPostType}>\r\n          {!posts && (\r\n            <div className=\"loading\">\r\n              <Spinner />\r\n            </div>\r\n          )}\r\n\r\n          {posts?.map(({ id, title, score, created }) => (\r\n            <PostItem\r\n              key={id}\r\n              title={title}\r\n              vote={score}\r\n              created={created}\r\n              id={id}\r\n            />\r\n          ))}\r\n\r\n          {posts?.length == 0 && (\r\n            <p className=\"not-found-questions\">\r\n              Don&apos;t have any questions yet.\r\n            </p>\r\n          )}\r\n        </PostList>\r\n      </UserCard>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const username = context.params.username\r\n  return {\r\n    props: {\r\n      username\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserDetail\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,WAAW;AAE5B,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,QAAQ,MAAM,sCAAsC;AAC3D,OAAOC,QAAQ,MAAM,gDAAgD;AACrE,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,MAAMC,UAAU,GAAG,CAAC;EAAEC;AAAS,CAAC,KAAK;EACnC,MAAM;IAAA,GAACC,KAAK;IAAA,GAAEC;EAAQ,IAAIZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAA,GAACa,QAAQ;IAAA,GAAEC;EAAW,IAAId,QAAQ,CAAC,WAAW,CAAC;EAErDD,SAAS,CAAC,MAAM;IACd,MAAMgB,cAAc,GAAG,YAAY;MACjC,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMd,WAAW,CAACe,GAAG,CAAE,kBAAiBP,QAAS,EAAC,CAAC;MACpEE,QAAQ,CAACI,IAAI,CAAC;IAChB,CAAC;IACDD,cAAc,EAAE;EAClB,CAAC,EAAE,CAACF,QAAQ,EAAEH,QAAQ,CAAC,CAAC;EAExB,OACE,MAAC,MAAM;IAAC,KAAK,EAAE,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACnB,MAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACH;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,aAAcA,QAAQ,oBAAwB,CACzC,EAEP,MAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACP,MAAC,UAAU;IAAC,QAAQ,EAAEA,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClC,MAAC,QAAQ;IAAC,QAAQ,EAAEG,QAAS;IAAC,WAAW,EAAEC,WAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACpD,CAACH,KAAK,IACL;IAAK,SAAS,EAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACtB,MAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAEd,EAEAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEO,GAAG,CAAC,CAAC;IAAEC,EAAE;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAQ,CAAC,KACxC,MAAC,QAAQ;IACP,GAAG,EAAEH,EAAG;IACR,KAAK,EAAEC,KAAM;IACb,IAAI,EAAEC,KAAM;IACZ,OAAO,EAAEC,OAAQ;IACjB,EAAE,EAAEH,EAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEV,CAAC,EAED,CAAAR,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEY,MAAM,KAAI,CAAC,IACjB;IAAG,SAAS,EAAC,qBAAqB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,mCAGnC,CACQ,CACF,CACJ;AAEb,CAAC;AAED,OAAO,eAAeC,kBAAkB,CAACC,OAAO,EAAE;EAChD,MAAMf,QAAQ,GAAGe,OAAO,CAACC,MAAM,CAAChB,QAAQ;EACxC,OAAO;IACLiB,KAAK,EAAE;MACLjB;IACF;EACF,CAAC;AACH;AAEA,eAAeD,UAAU"},"metadata":{},"sourceType":"module"}