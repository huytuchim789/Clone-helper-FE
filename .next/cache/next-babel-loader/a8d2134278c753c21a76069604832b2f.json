{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TUYEN\\\\Documents\\\\ITSS\\\\Clone-helper-FE\\\\pages\\\\questions\\\\[slug].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport DetailPageContainer from '../../components/detail-page-container';\nimport PostWrapper from '../../components/post/post-wrapper';\nimport PostVote from '../../components/post/post-vote';\nimport PostSummary from '../../components/post/post-summary';\nimport CommentList from '../../components/post/comment-list';\nimport CommentItem from '../../components/post/comment-list/comment-item';\nimport AnswerContainer from '../../components/answer-container';\nimport AddAnswer from '../../components/add-answer';\nimport { Spinner } from '../../components/icons';\nconst QuestionDetail = ({\n  questionId,\n  title\n}) => {\n  const {\n    0: question,\n    1: setQuestion\n  } = useState(null);\n  const {\n    0: answerSortType,\n    1: setAnswersSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/question/${questionId}`);\n      setQuestion(data);\n    };\n    fetchQuestion();\n  }, []);\n  const handleSorting = () => {\n    switch (answerSortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n      default:\n        break;\n    }\n  };\n  const isClient = false;\n  console.log('ádsad', question);\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: isClient && window.location.href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(PageTitle, {\n    title: title,\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(DetailPageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, !question && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })), question && __jsx(React.Fragment, null, __jsx(PostWrapper, {\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(PostVote, {\n    score: question.score,\n    votes: question.votes,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), __jsx(PostSummary, {\n    tags: question.tags,\n    author: question.author,\n    created: question.created,\n    questionId: questionId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, question.text), __jsx(CommentList, {\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, question.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, body)))), question.answers.length > 0 && __jsx(AnswerContainer, {\n    answersCount: question.answers.length,\n    answerSortType: answerSortType,\n    setAnswerSortType: setAnswersSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, question.answers.sort(handleSorting()).map(answer => __jsx(PostWrapper, {\n    key: answer.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, __jsx(PostVote, {\n    score: answer.score,\n    votes: answer.votes,\n    answerId: answer.id,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), __jsx(PostSummary, {\n    author: answer.author,\n    created: answer.created,\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, answer.text), __jsx(CommentList, {\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, answer.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    answerId: answer.id,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, body)))))), __jsx(AddAnswer, {\n    tags: question.tags,\n    id: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }))));\n};\nexport async function getServerSideProps(context) {\n  const slug = context.params.slug;\n  const questionId = slug.split('-').shift();\n  const title = slug === null || slug === void 0 ? void 0 : slug.substr(slug.indexOf('-') + 1).split('-').join(' ');\n  return {\n    props: {\n      questionId,\n      title\n    }\n  };\n}\nexport default QuestionDetail;","map":{"version":3,"names":["React","useEffect","useState","Head","publicFetch","Layout","PageTitle","DetailPageContainer","PostWrapper","PostVote","PostSummary","CommentList","CommentItem","AnswerContainer","AddAnswer","Spinner","QuestionDetail","questionId","title","question","setQuestion","answerSortType","setAnswersSortType","fetchQuestion","data","get","handleSorting","a","b","score","Date","created","isClient","console","log","window","location","href","votes","tags","author","text","comments","map","id","body","username","answers","length","sort","answer","getServerSideProps","context","slug","params","split","shift","substr","indexOf","join","props"],"sources":["C:/Users/TUYEN/Documents/ITSS/Clone-helper-FE/pages/questions/[slug].js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Head from 'next/head'\r\n\r\nimport { publicFetch } from '../../util/fetcher'\r\n\r\nimport Layout from '../../components/layout'\r\nimport PageTitle from '../../components/page-title'\r\nimport DetailPageContainer from '../../components/detail-page-container'\r\nimport PostWrapper from '../../components/post/post-wrapper'\r\nimport PostVote from '../../components/post/post-vote'\r\nimport PostSummary from '../../components/post/post-summary'\r\nimport CommentList from '../../components/post/comment-list'\r\nimport CommentItem from '../../components/post/comment-list/comment-item'\r\nimport AnswerContainer from '../../components/answer-container'\r\nimport AddAnswer from '../../components/add-answer'\r\nimport { Spinner } from '../../components/icons'\r\n\r\nconst QuestionDetail = ({ questionId, title }) => {\r\n  const [question, setQuestion] = useState(null)\r\n  const [answerSortType, setAnswersSortType] = useState('Votes')\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const { data } = await publicFetch.get(`/question/${questionId}`)\r\n      setQuestion(data)\r\n    }\r\n\r\n    fetchQuestion()\r\n  }, [])\r\n\r\n  const handleSorting = () => {\r\n    switch (answerSortType) {\r\n      case 'Votes':\r\n        return (a, b) => b.score - a.score\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const isClient = typeof window === 'object'\r\n  console.log('ádsad', question)\r\n  return (\r\n    <Layout extra={false}>\r\n      <Head>\r\n        <title>{title}</title>\r\n        <link rel=\"canonical\" href={isClient && window.location.href}></link>\r\n      </Head>\r\n\r\n      <PageTitle title={title} button />\r\n\r\n      <DetailPageContainer>\r\n        {!question && (\r\n          <div className=\"loading\">\r\n            <Spinner />\r\n          </div>\r\n        )}\r\n\r\n        {question && (\r\n          <>\r\n            <PostWrapper borderBottom={false}>\r\n              <PostVote\r\n                score={question.score}\r\n                votes={question.votes}\r\n                questionId={questionId}\r\n                setQuestion={setQuestion}\r\n              />\r\n              <PostSummary\r\n                tags={question.tags}\r\n                author={question.author}\r\n                created={question.created}\r\n                questionId={questionId}\r\n              >\r\n                {question.text}\r\n              </PostSummary>\r\n              <CommentList questionId={questionId} setQuestion={setQuestion}>\r\n                {question.comments.map(({ id, author, created, body }) => (\r\n                  <CommentItem\r\n                    key={id}\r\n                    commentId={id}\r\n                    questionId={questionId}\r\n                    author={author.username}\r\n                    isOwner={author.username === question.author.username}\r\n                    created={created}\r\n                    setQuestion={setQuestion}\r\n                  >\r\n                    {body}\r\n                  </CommentItem>\r\n                ))}\r\n              </CommentList>\r\n            </PostWrapper>\r\n\r\n            {question.answers.length > 0 && (\r\n              <AnswerContainer\r\n                answersCount={question.answers.length}\r\n                answerSortType={answerSortType}\r\n                setAnswerSortType={setAnswersSortType}\r\n              >\r\n                {question.answers.sort(handleSorting()).map((answer) => (\r\n                  <PostWrapper key={answer.id}>\r\n                    <PostVote\r\n                      score={answer.score}\r\n                      votes={answer.votes}\r\n                      answerId={answer.id}\r\n                      questionId={questionId}\r\n                      setQuestion={setQuestion}\r\n                    />\r\n                    <PostSummary\r\n                      author={answer.author}\r\n                      created={answer.created}\r\n                      questionId={questionId}\r\n                      answerId={answer.id}\r\n                      setQuestion={setQuestion}\r\n                    >\r\n                      {answer.text}\r\n                    </PostSummary>\r\n                    <CommentList\r\n                      questionId={questionId}\r\n                      answerId={answer.id}\r\n                      setQuestion={setQuestion}\r\n                    >\r\n                      {answer.comments.map(({ id, author, created, body }) => (\r\n                        <CommentItem\r\n                          key={id}\r\n                          commentId={id}\r\n                          questionId={questionId}\r\n                          answerId={answer.id}\r\n                          author={author.username}\r\n                          isOwner={author.username === question.author.username}\r\n                          created={created}\r\n                          setQuestion={setQuestion}\r\n                        >\r\n                          {body}\r\n                        </CommentItem>\r\n                      ))}\r\n                    </CommentList>\r\n                  </PostWrapper>\r\n                ))}\r\n              </AnswerContainer>\r\n            )}\r\n\r\n            <AddAnswer\r\n              tags={question.tags}\r\n              id={questionId}\r\n              setQuestion={setQuestion}\r\n            />\r\n          </>\r\n        )}\r\n      </DetailPageContainer>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const slug = context.params.slug\r\n  const questionId = slug.split('-').shift()\r\n  const title = slug\r\n    ?.substr(slug.indexOf('-') + 1)\r\n    .split('-')\r\n    .join(' ')\r\n\r\n  return {\r\n    props: {\r\n      questionId,\r\n      title\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuestionDetail\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}