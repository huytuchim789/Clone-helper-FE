{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TUYEN\\\\Documents\\\\ITSS\\\\Clone-helper-FE\\\\components\\\\post\\\\add-comment\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport TextArea from '../../textarea';\nimport Button from '../../button';\nimport styles from './add-comment.module.css';\nconst AddComment = ({\n  questionId,\n  answerId,\n  setShowAddComment,\n  setQuestion\n}) => {\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      comment: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n      try {\n        const {\n          data\n        } = await authAxios.post(`/comment/${questionId}/${answerId ? answerId : ''}`, values);\n        setQuestion(data);\n        resetForm({});\n        setShowAddComment(false);\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      comment: Yup.string().required('Comment is missing.').min(5, 'Comment must be at least 5 characters.').max(1000, 'Comment cannot be longer than 1000 characters.')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    className: styles.container,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(TextArea, {\n    name: \"comment\",\n    autoComplete: \"off\",\n    value: values.comment,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.comment && errors.comment,\n    errorMessage: errors.comment && errors.comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, status), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    className: styles.button,\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Add Comment\"))));\n};\nexport default AddComment;","map":{"version":3,"names":["React","useState","useContext","Formik","Yup","FetchContext","TextArea","Button","styles","AddComment","questionId","answerId","setShowAddComment","setQuestion","authAxios","loading","setLoading","comment","values","setStatus","resetForm","data","post","error","response","message","object","string","required","min","max","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","container","button"],"sources":["C:/Users/TUYEN/Documents/ITSS/Clone-helper-FE/components/post/add-comment/index.js"],"sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { FetchContext } from '../../../store/fetch'\r\n\r\nimport TextArea from '../../textarea'\r\nimport Button from '../../button'\r\n\r\nimport styles from './add-comment.module.css'\r\n\r\nconst AddComment = ({\r\n  questionId,\r\n  answerId,\r\n  setShowAddComment,\r\n  setQuestion\r\n}) => {\r\n  const { authAxios } = useContext(FetchContext)\r\n\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ comment: '' }}\r\n      onSubmit={async (values, { setStatus, resetForm }) => {\r\n        setLoading(true)\r\n        try {\r\n          const { data } = await authAxios.post(\r\n            `/comment/${questionId}/${answerId ? answerId : ''}`,\r\n            values\r\n          )\r\n\r\n          setQuestion(data)\r\n\r\n          resetForm({})\r\n          setShowAddComment(false)\r\n        } catch (error) {\r\n          setStatus(error.response.data.message)\r\n        }\r\n        setLoading(false)\r\n      }}\r\n      validationSchema={Yup.object({\r\n        comment: Yup.string()\r\n          .required('Comment is missing.')\r\n          .min(5, 'Comment must be at least 5 characters.')\r\n          .max(1000, 'Comment cannot be longer than 1000 characters.')\r\n      })}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        status,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting\r\n      }) => (\r\n        <form className={styles.container} onSubmit={handleSubmit}>\r\n          <TextArea\r\n            name=\"comment\"\r\n            autoComplete=\"off\"\r\n            value={values.comment}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            hasError={touched.comment && errors.comment}\r\n            errorMessage={errors.comment && errors.comment}\r\n          />\r\n          <p className={styles.status}>{status}</p>\r\n          <div>\r\n            <Button\r\n              className={styles.button}\r\n              type=\"submit\"\r\n              primary\r\n              isLoading={loading}\r\n              disabled={isSubmitting}\r\n            >\r\n              Add Comment\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default AddComment\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,YAAY,QAAQ,sBAAsB;AAEnD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,MAAM,MAAM,cAAc;AAEjC,OAAOC,MAAM,MAAM,0BAA0B;AAE7C,MAAMC,UAAU,GAAG,CAAC;EAClBC,UAAU;EACVC,QAAQ;EACRC,iBAAiB;EACjBC;AACF,CAAC,KAAK;EACJ,MAAM;IAAEC;EAAU,CAAC,GAAGZ,UAAU,CAACG,YAAY,CAAC;EAE9C,MAAM;IAAA,GAACU,OAAO;IAAA,GAAEC;EAAU,IAAIf,QAAQ,CAAC,KAAK,CAAC;EAE7C,OACE,MAAC,MAAM;IACL,aAAa,EAAE;MAAEgB,OAAO,EAAE;IAAG,CAAE;IAC/B,QAAQ,EAAE,OAAOC,MAAM,EAAE;MAAEC,SAAS;MAAEC;IAAU,CAAC,KAAK;MACpDJ,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAM;UAAEK;QAAK,CAAC,GAAG,MAAMP,SAAS,CAACQ,IAAI,CAClC,YAAWZ,UAAW,IAAGC,QAAQ,GAAGA,QAAQ,GAAG,EAAG,EAAC,EACpDO,MAAM,CACP;QAEDL,WAAW,CAACQ,IAAI,CAAC;QAEjBD,SAAS,CAAC,CAAC,CAAC,CAAC;QACbR,iBAAiB,CAAC,KAAK,CAAC;MAC1B,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdJ,SAAS,CAACI,KAAK,CAACC,QAAQ,CAACH,IAAI,CAACI,OAAO,CAAC;MACxC;MACAT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAE;IACF,gBAAgB,EAAEZ,GAAG,CAACsB,MAAM,CAAC;MAC3BT,OAAO,EAAEb,GAAG,CAACuB,MAAM,EAAE,CAClBC,QAAQ,CAAC,qBAAqB,CAAC,CAC/BC,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC,CAChDC,GAAG,CAAC,IAAI,EAAE,gDAAgD;IAC/D,CAAC,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEF,CAAC;IACAZ,MAAM;IACNa,MAAM;IACNC,OAAO;IACPC,MAAM;IACNC,YAAY;IACZC,UAAU;IACVC,YAAY;IACZC;EACF,CAAC,KACC;IAAM,SAAS,EAAE7B,MAAM,CAAC8B,SAAU;IAAC,QAAQ,EAAEF,YAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACxD,MAAC,QAAQ;IACP,IAAI,EAAC,SAAS;IACd,YAAY,EAAC,KAAK;IAClB,KAAK,EAAElB,MAAM,CAACD,OAAQ;IACtB,QAAQ,EAAEiB,YAAa;IACvB,MAAM,EAAEC,UAAW;IACnB,QAAQ,EAAEH,OAAO,CAACf,OAAO,IAAIc,MAAM,CAACd,OAAQ;IAC5C,YAAY,EAAEc,MAAM,CAACd,OAAO,IAAIc,MAAM,CAACd,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC/C,EACF;IAAG,SAAS,EAAET,MAAM,CAACyB,MAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAEA,MAAM,CAAK,EACzC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,MAAM;IACL,SAAS,EAAEzB,MAAM,CAAC+B,MAAO;IACzB,IAAI,EAAC,QAAQ;IACb,OAAO;IACP,SAAS,EAAExB,OAAQ;IACnB,QAAQ,EAAEsB,YAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBAGhB,CACL,CAET,CACM;AAEb,CAAC;AAED,eAAe5B,UAAU"},"metadata":{},"sourceType":"module"}