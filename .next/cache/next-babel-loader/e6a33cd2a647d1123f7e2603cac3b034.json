{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TUYEN\\\\Documents\\\\ITSS\\\\Clone-helper-FE\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../util/fetcher';\nimport Layout from '../components/layout';\nimport QuestionWrapper from '../components/question/question-wrapper';\nimport QuestionStats from '../components/question/question-stats';\nimport QuestionSummary from '../components/question/question-summary';\nimport PageTitle from '../components/page-title';\nimport ButtonGroup from '../components/button-group';\nimport { Spinner } from '../components/icons';\nimport { Button, Pagination } from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\nconst HomePage = () => {\n  const router = useRouter();\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Highest Vote');\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const {\n    0: total,\n    1: setTotal\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      setLoading(true);\n      try {\n        const res = await publicFetch.get(`/question?page=${page}`);\n        const {\n          data,\n          total: totalQuestions\n        } = await res.data;\n        setTotal(totalQuestions);\n        setQuestions(data);\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    const fetchQuestionByTag = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/questions/${router.query.tag}`);\n      setQuestions(data);\n    };\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n    setLoading(false);\n  }, [router.query.tag, page]);\n  const handelChange = page => {\n    setPage(page);\n  };\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Highest Vote':\n        return (a, b) => b.score - a.score;\n      case 'Highest View':\n        return (a, b) => b.views - a.views;\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n      default:\n        break;\n    }\n  };\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - CodingHelper\")), __jsx(PageTitle, {\n    title: router.query.tag ? `Questions tagged [${router.query.tag}]` : 'All Questions',\n    button: true,\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Newest', 'Oldest', 'Highest Vote', 'Highest View'],\n    selected: sortType,\n    setPage: setPage,\n    setSelected: setSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    icon: __jsx(SearchOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Search\"), loading && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(({\n    id,\n    votes,\n    answers,\n    views,\n    title,\n    text,\n    tags,\n    author,\n    created\n  }) => __jsx(QuestionWrapper, {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, __jsx(QuestionStats, {\n    voteCount: votes.length,\n    answerCount: answers.length,\n    view: views,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }), __jsx(QuestionSummary, {\n    id: id,\n    title: title,\n    tags: tags,\n    author: author,\n    createdTime: created,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, text))), __jsx(Pagination, {\n    pageSize: 10,\n    current: page,\n    total: total,\n    onChange: handelChange,\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }));\n};\nexport default HomePage;","map":{"version":3,"names":["React","useState","useEffect","Head","useRouter","publicFetch","Layout","QuestionWrapper","QuestionStats","QuestionSummary","PageTitle","ButtonGroup","Spinner","Button","Pagination","SearchOutlined","HomePage","router","questions","setQuestions","sortType","setSortType","page","setPage","total","setTotal","loading","setLoading","fetchQuestion","res","get","data","totalQuestions","console","log","error","fetchQuestionByTag","query","tag","handelChange","handleSorting","a","b","score","views","Date","created","sort","map","id","votes","answers","title","text","tags","author","length","textAlign"],"sources":["C:/Users/TUYEN/Documents/ITSS/Clone-helper-FE/pages/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Head from 'next/head'\r\nimport { useRouter } from 'next/router'\r\n\r\nimport { publicFetch } from '../util/fetcher'\r\n\r\nimport Layout from '../components/layout'\r\nimport QuestionWrapper from '../components/question/question-wrapper'\r\nimport QuestionStats from '../components/question/question-stats'\r\nimport QuestionSummary from '../components/question/question-summary'\r\nimport PageTitle from '../components/page-title'\r\nimport ButtonGroup from '../components/button-group'\r\nimport { Spinner } from '../components/icons'\r\nimport { Button, Pagination } from \"antd\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst HomePage = () => {\r\n\r\n  const router = useRouter()\r\n\r\n  const [questions, setQuestions] = useState(null)\r\n  const [sortType, setSortType] = useState('Highest Vote')\r\n  const [page, setPage] = useState(1)\r\n  const [total, setTotal] = useState(0)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await publicFetch.get(`/question?page=${page}`)\r\n        const {data, total: totalQuestions} = await res.data\r\n        \r\n        setTotal(totalQuestions)\r\n        setQuestions(data)\r\n        console.log(data)\r\n      } catch (error){\r\n        console.log(error)\r\n      }\r\n\r\n    }\r\n\r\n    const fetchQuestionByTag = async () => {\r\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\r\n      setQuestions(data)\r\n    }\r\n\r\n    if (router.query.tag) {\r\n      fetchQuestionByTag()\r\n    } else {\r\n      fetchQuestion()\r\n    }\r\n    setLoading(false)\r\n  }, [router.query.tag, page])\r\n\r\n  const handelChange = (page) => {\r\n    setPage(page)\r\n  }\r\n\r\n  const handleSorting = () => {\r\n    switch (sortType) {\r\n      case 'Highest Vote':\r\n        return (a, b) => b.score - a.score\r\n      case 'Highest View':\r\n        return (a, b) => b.views - a.views\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout extra={false}>\r\n      <Head>\r\n        <title>\r\n          {router.query.tag ? router.query.tag : 'Questions'} -\r\n          CodingHelper\r\n        </title>\r\n      </Head>\r\n\r\n      <PageTitle title={router.query.tag ? `Questions tagged [${router.query.tag}]` : 'All Questions'} button borderBottom={false} />\r\n\r\n      <ButtonGroup\r\n        borderBottom\r\n        buttons={['Newest', 'Oldest', 'Highest Vote', 'Highest View', ]}\r\n        selected={sortType}\r\n        setPage={setPage}\r\n        setSelected={setSortType}\r\n      />\r\n      <Button icon={<SearchOutlined />}>Search</Button>\r\n\r\n      {loading && (\r\n        <div className=\"loading\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n\r\n      {questions\r\n        ?.sort(handleSorting())\r\n        .map(\r\n          ({\r\n            id,\r\n            votes,\r\n            answers,\r\n            views,\r\n            title,\r\n            text,\r\n            tags,\r\n            author,\r\n            created\r\n          }) => (\r\n            <QuestionWrapper key={id}>\r\n              <QuestionStats\r\n                voteCount={votes.length}\r\n                answerCount={answers.length}\r\n                view={views}\r\n              />\r\n              <QuestionSummary\r\n                id={id}\r\n                title={title}\r\n                tags={tags}\r\n                author={author}\r\n                createdTime={created}\r\n              >\r\n                {text}\r\n              </QuestionSummary>\r\n            </QuestionWrapper>\r\n          )\r\n        )}\r\n          <Pagination\r\n          pageSize={10}\r\n          current={page}\r\n          total={total}\r\n          onChange={handelChange}\r\n          style={{ textAlign: \"center\" }}\r\n        />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}