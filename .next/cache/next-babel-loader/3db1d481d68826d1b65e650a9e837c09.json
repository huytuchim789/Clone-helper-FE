{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TUYEN\\\\Documents\\\\ITSS\\\\Clone-helper-FE\\\\components\\\\auth-forms\\\\login-form\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../../util/fetcher';\nimport { AuthContext } from '../../../store/auth';\nimport ModalContext from '../../../store/modal';\nimport FormInput from '../../form-input';\nimport Button from '../../button';\nimport styles from './login-form.module.css';\nconst LoginForm = () => {\n  const {\n    setAuthState\n  } = useContext(AuthContext);\n  const {\n    setIsComponentVisible\n  } = useContext(ModalContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n      try {\n        const {\n          data\n        } = await publicFetch.post('authenticate', values);\n        const {\n          token,\n          expiresAt,\n          userInfo\n        } = data;\n        setAuthState({\n          token,\n          expiresAt,\n          userInfo\n        });\n        resetForm({});\n        setIsComponentVisible(false);\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      username: Yup.string().required('Required').max(16, 'Must be at most 16 characters long').matches(/^[a-zA-Z0-9_-]+$/, 'Contains invalid characters'),\n      password: Yup.string().required('Required').min(6, 'Must be at least 6 characters long').max(50, 'Must be at most 50 characters long')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: styles.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(FormInput, {\n    label: \"Username\",\n    type: \"text\",\n    name: \"username\",\n    autoComplete: \"off\",\n    value: values.username,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.username && errors.username,\n    errorMessage: errors.username && errors.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }), __jsx(FormInput, {\n    label: \"Password\",\n    type: \"password\",\n    name: \"password\",\n    autoComplete: \"off\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.password && errors.password,\n    errorMessage: errors.password && errors.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, status), __jsx(Button, {\n    primary: true,\n    full: true,\n    className: styles.submitButton,\n    type: \"submit\",\n    isLoading: loading,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Log in\")));\n};\nexport default LoginForm;","map":{"version":3,"names":["React","useState","useContext","Formik","Yup","publicFetch","AuthContext","ModalContext","FormInput","Button","styles","LoginForm","setAuthState","setIsComponentVisible","loading","setLoading","username","password","values","setStatus","resetForm","data","post","token","expiresAt","userInfo","error","response","message","object","string","required","max","matches","min","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","form","submitButton"],"sources":["C:/Users/TUYEN/Documents/ITSS/Clone-helper-FE/components/auth-forms/login-form/index.js"],"sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { publicFetch } from '../../../util/fetcher'\r\nimport { AuthContext } from '../../../store/auth'\r\nimport ModalContext from '../../../store/modal'\r\n\r\nimport FormInput from '../../form-input'\r\nimport Button from '../../button'\r\n\r\nimport styles from './login-form.module.css'\r\n\r\nconst LoginForm = () => {\r\n  const { setAuthState } = useContext(AuthContext)\r\n  const { setIsComponentVisible } = useContext(ModalContext)\r\n\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ username: '', password: '' }}\r\n      onSubmit={async (values, { setStatus, resetForm }) => {\r\n        setLoading(true)\r\n        try {\r\n          const { data } = await publicFetch.post('authenticate', values)\r\n          const { token, expiresAt, userInfo } = data\r\n          setAuthState({ token, expiresAt, userInfo })\r\n          resetForm({})\r\n          setIsComponentVisible(false)\r\n        } catch (error) {\r\n          setStatus(error.response.data.message)\r\n        }\r\n        setLoading(false)\r\n      }}\r\n      validationSchema={Yup.object({\r\n        username: Yup.string()\r\n          .required('Required')\r\n          .max(16, 'Must be at most 16 characters long')\r\n          .matches(/^[a-zA-Z0-9_-]+$/, 'Contains invalid characters'),\r\n        password: Yup.string()\r\n          .required('Required')\r\n          .min(6, 'Must be at least 6 characters long')\r\n          .max(50, 'Must be at most 50 characters long')\r\n      })}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        status,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting\r\n      }) => (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n          <FormInput\r\n            label=\"Username\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            autoComplete=\"off\"\r\n            value={values.username}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            hasError={touched.username && errors.username}\r\n            errorMessage={errors.username && errors.username}\r\n          />\r\n          <FormInput\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            autoComplete=\"off\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            hasError={touched.password && errors.password}\r\n            errorMessage={errors.password && errors.password}\r\n          />\r\n          <p className={styles.status}>{status}</p>\r\n          <Button\r\n            primary\r\n            full\r\n            className={styles.submitButton}\r\n            type=\"submit\"\r\n            isLoading={loading}\r\n            disabled={isSubmitting}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default LoginForm\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}